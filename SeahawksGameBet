pragma solidity >=0.4.22 <0.6.0;
contract SeahawksGameBet {

    address public owner;
    uint256 public betAmount;  // !! Convention is to just use uint256 for everything. uint == uint256, but people like to be explicit
    uint256 public numberOfBets;
    uint256 public totalParticipants;
    bool public ownerPrediction;
    
    address[2] public participants; 
    
    mapping (address => bool) public participantData;
    
    event OwnerAdded(address add, uint256 amount);
    event ParticipantAdded(address add, uint256 amount);
    event OwnerBackOut(address add, uint256 amount);
    event PrizeDistributed(address winner, uint amount);
    
    // Constructor, takes in number of participants in bet
    function initBet(bool gamePrediction) public payable {
        owner = msg.sender;
        betAmount = msg.value;
        numberOfBets = 0;
        totalParticipants = 2;
        ownerPrediction = gamePrediction;
        addParticipant(msg.sender, gamePrediction);
        
        emit OwnerAdded(msg.sender, betAmount);
    }

    function joinBet() public payable {
        // checks if owner has joined
        require(numberOfBets == 1);
        // check if player exists
        require(!participantExists(msg.sender));
        // check if meets bet amount
        require(msg.value == betAmount);
        addParticipant(msg.sender, !participantData[0]);
        
        emit ParticipantAdded(msg.sender, msg.value);
    }

    // Checks if participant exits
    function participantExists(address participantToCheck) public view returns(bool) {
        for (uint256 i = 0; i < totalParticipants; i++) { 
            if (participants[i] == participantToCheck) {
                return true;
            }
        }
        return false;
    }
    
    function addParticipant(address adr, bool _winOrLose) private {
        // set participant info
        participantData[adr] = _winOrLose;
        // add participant address to array
        participants[numberOfBets] = adr;
        // increment numberOfBets
        numberOfBets++;
    }
    
    // Allow the first person to withdraw their funds if the second person has not yet deposited his bet
    function backOut() public  {
        require(numberOfBets == 1);
        address temp = participants[0];
        
        delete participants[0];
        numberOfBets = 0;
        temp.transfer(betAmount);
        betAmount = 0;
        
        emit OwnerBackOut(msg.sender, betAmount);
    }
    
    // Transfer prize to winner.
    function distributePrize(bool gameResult) public {
        require(numberOfBets == totalParticipants);
        
        address temp;
        if (participantData[participants[0]] == gameResult) {
            //transfer money to participant[0]
            temp = participants[0];
        } else {
            temp = participants[1];
        }
        
        // winner cannot distribute prize
        //require(msg.sender != temp); 
        
        delete participants[0];
        delete participants[1];
        numberOfBets = 0;
        
        // send out ether
        emit PrizeDistributed (temp, betAmount.mul(2));
        temp.transfer(betAmount.mul(2));
        
        betAmount = 0;
    }
}
